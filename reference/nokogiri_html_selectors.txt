Syntax for selection using nokogiri / open-uri
source: http://ruby.bastardsbook.com/chapters/html-parsing/

To select...

  a class:
  The main difference between id and class is that many elements can have the same class. The CSS selector to select all elements of a given class is: ".the_classname_here"

  the <title> element
  e.g. <head><title>My webpage</title></head>
    scraped_object.css('title')
    ==> <title>My webpage</title>


  Sample code for below selections:
  <div id="funstuff">
   <p>Here are some entertaining links:</p>
   <ul>
      <li><a href="http://youtube.com">YouTube</a></li>
      <li><a data-category="news" href="http://reddit.com">Reddit</a></li>
   </ul>
  </div>


    all <li> elements
      scraped_object.css('li')
      ==> <li><a href="http://youtube.com">YouTube</a></li>
          <li><a data-category="news" href="http://reddit.com">Reddit</a></li>

    the text of the first <li> element
      scraped_object.css('li')[0].text
      ==> YouTube

    the url of the second <li> element
      scraped_object.css('li')[1]['href']
      ==> http://reddit.com

    the <li> elements with a data-category of new
      scraped_object.css("li[data-category='news']")
      ==>  <li><a data-category="news" href="http://reddit.com">Reddit</a></li>


    the <div> element with an id of "funstuff"
      scraped_object.css('div#funstuff')
      ==> everything above
      *if you just want to pull the content of the actual tag (instead of the content in between), add [0] to the end of the above

    the <a> elements nested inside the <div> element that has an id of "funstuff"
      scraped_object.css('div#funstuff a')
      ==> <a href="http://youtube.com">YouTube</a>


JSON object constraints:
source: https://www.w3schools.com/js/js_json_objects.asp
- JSON objects are surrounded by curly braces {}.
- JSON objects is written in key/value pairs.
- Keys must be strings, and values must be a valid JSON data type (string, number, object, array, boolean or null).
- Keys and values are separated by a colon.
- Each key/value pair is separated by a comma

# Scenario: Create an CTA with contact, location, and call script
# And the client sets the JSON request body to:
#  {
#    "data": {
#       "type": "ctas",
#       "attributes": {
#          "title": "foobar",
#          "description": "Lorem ipsum",
#          "free": true,
#          "start-time": "1526725814",
#          "end-time": "1526740214",
#          "cta-type": "phone",
#          "website": "www.example.com"
#        },
#        "relationships": {
#          "location": {
#            "data": { "type": "locations", "id": "bbbbbbbb-1111-2222-3333-666666666666" }
#          },
#          "contact": {
#            "data": { "type": "contacts", "id": "cccccccc-1111-2222-3333-666666666666" }
#          },
#          "call-script": {
#            "data": { "type": "call-scripts", "id": "dddddddd-1111-2222-3333-666666666666" }
#          }
#        }
#     }
#  }
